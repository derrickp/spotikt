/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.plotsky.spotikt

import com.squareup.moshi.Moshi
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import dev.plotsky.musikt.Client
import dev.plotsky.musikt.Configuration
import dev.plotsky.spotikt.spotify.AlbumListensProcessor
import dev.plotsky.spotikt.spotify.AreaResults
import dev.plotsky.spotikt.spotify.AreaResultsLoader
import dev.plotsky.spotikt.spotify.AreaStatistics
import dev.plotsky.spotikt.spotify.ArtistAreaProcessor
import dev.plotsky.spotikt.spotify.LocalDateTimeAdapter
import dev.plotsky.spotikt.spotify.ParsedHistoryLoader
import dev.plotsky.spotikt.spotify.Results
import dev.plotsky.spotikt.spotify.StreamHistoryParser
import java.io.File
import kotlin.system.exitProcess

class App(
    private val streamingHistoryFile: String,
    private val resultsFile: String,
    private val artistAreasFile: String,
    private val operation: String
) {
    private val moshi: Moshi by lazy {
        Moshi.Builder()
            .add(LocalDateTimeAdapter())
            .add(KotlinJsonAdapterFactory())
            .build()
    }
    private val results: Results by lazy {
        loadHistory(resultsFile)
    }
    private val areaResults: AreaResults by lazy {
        loadAreaResults()
    }

    private val musiktConfig: Configuration by lazy {
        Configuration(
            baseUrl = "https://musicbrainz.org/ws/2",
            appName = "Spotikt",
            contact = "Derrick Plotsky https://github.com/derrickp"
        )
    }

    fun run() {
        when (operation.toLowerCase()) {
            "listens" -> fillAlbumListens()
            "areas" -> getArtistAreas()
            "stats" -> getAreaStats()
        }
    }

    private fun getAreaStats() {
        val stats = AreaStatistics(areaResults)
        val output = stats.countryCounts().toList()
                .sortedBy { it.second }.reversed().toMap()
        val subdivisionOutput = stats
                .subDivisionCounts("United States")
        println(output)
        println(subdivisionOutput)
    }

    private fun getArtistAreas() {
        val client = Client.build(musiktConfig)
        val file = File(streamingHistoryFile)
        val listens = parseSpotifyStreaming(file)
        val flushResults =
                { results: AreaResults -> flush(results, resultsFile) }
        val areaProcessor = ArtistAreaProcessor(
                listens,
                client,
                areaResults,
                flushResults
        )
        areaProcessor.process()
    }

    private fun fillAlbumListens() {
        val client = Client.build(musiktConfig)
        val file = File(streamingHistoryFile)
        val listens = parseSpotifyStreaming(file)
        val flushHistory =
                { history: Results -> flush(history, resultsFile) }
        val spotifyAlbums = AlbumListensProcessor(
                listens,
                client,
                results,
                flushHistory
        )
        spotifyAlbums.process(null)
    }

    private fun flush(history: Results, fileName: String) {
        ParsedHistoryLoader.flush(
            moshi = moshi,
            fileName = fileName,
            history = history
        )
    }

    private fun flush(results: AreaResults, fileName: String) {
        AreaResultsLoader.flush(
            moshi = moshi,
            fileName = fileName,
            results = results
        )
    }

    private fun loadHistory(resultsFile: String): Results {
        return if (File(resultsFile).isFile) {
            ParsedHistoryLoader.fromFile(resultsFile, moshi)
        } else {
            val history = Results(0)
            flush(history, resultsFile)
            history
        }
    }

    private fun loadAreaResults(): AreaResults {
        return if (File(artistAreasFile).isFile) {
            AreaResultsLoader.fromFile(artistAreasFile, moshi)
        } else {
            val results = AreaResults(0)
            flush(results, artistAreasFile)
            results
        }
    }

    private fun parseSpotifyStreaming(file: File) =
            StreamHistoryParser(moshi).parse(file)
}

const val STREAMING_INDEX = 0
const val RESULTS_INDEX = 1
const val ARTIST_AREAS_INDEX = 2
const val OPERATION_INDEX = 3

fun main(args: Array<String>) {
    val streamingHistoryFile = args[STREAMING_INDEX]
    println(streamingHistoryFile)
    val resultsFile = args[RESULTS_INDEX]
    println(resultsFile)
    val artistAreasFile = args[ARTIST_AREAS_INDEX]
    val operation = args[OPERATION_INDEX]
    val app = App(streamingHistoryFile, resultsFile, artistAreasFile, operation)
    app.run()
//    val top100 = results.topArtists(100)
//    val line = top100.map { it.maxAlbum.toString() }.joinToString("\n")
//    println(line)
//    val top100File = File("top100.txt")
//    top100File.writeText(line)
//    app.run(input, results, outputFile)

    exitProcess(0)
}
