/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.plotsky.spotikt

import com.squareup.moshi.Moshi
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import dev.plotsky.musikt.Configuration
import dev.plotsky.musikt.Request
import dev.plotsky.musikt.search.RecordingRepository
import dev.plotsky.spotikt.spotify.*
import okhttp3.OkHttpClient
import java.io.File
import kotlin.system.exitProcess

class App {
    val moshi: Moshi = Moshi.Builder().add(KotlinJsonAdapterFactory())
            .add(LocalDateTimeAdapter())
            .build()
    val greeting: String = "hello"
    fun run(fileName: String, parsedHistory: ParsedHistory, outputFile: String) {
        val file = File(fileName)
        val listens = parseSpotifyStreaming(file)
        val flushHistory = { history: ParsedHistory -> flush(history, outputFile) }
        val spotifyAlbums = SpotifyAlbumListens(listens, recordingRepository(), parsedHistory, flushHistory)
        spotifyAlbums.fillAlbumListens(null)
        return
    }

    fun flush(history: ParsedHistory, fileName: String) {
        ParsedHistoryLoader.flush(
                moshi = moshi,
                fileName = fileName,
                history = history
        )
    }

    private fun musiktConfig(): Configuration {
        return Configuration(
            baseUrl = "https://musicbrainz.org/ws/2",
            appName = "Spotikt",
            contact = "Derrick Plotsky https://github.com/derrickp"
        )
    }

    private fun recordingRepository(): RecordingRepository {
        val config = musiktConfig()
        val client = OkHttpClient().newBuilder().build()
        val request: Request = Request(config, client)
        return RecordingRepository(request)
    }

    private fun parseSpotifyStreaming(file: File) =
            StreamHistoryParser(moshi).parse(file)
}

fun main(args: Array<String>) {
    println(args[0])
    val input = args[0]
    val outputFile = args[1]
    val app = App()
    val results = ParsedHistoryLoader.fromFile(outputFile, app.moshi)
//    val top100 = results.topArtists(100)
//    val line = top100.map { it.maxAlbum.toString() }.joinToString("\n")
//    println(line)
//    val top100File = File("top100.txt")
//    top100File.writeText(line)
    app.flush(results, outputFile)
    app.run(input, results, outputFile)

    exitProcess(0)
}
